php -v			// display php version
mysql -V		// display mysql version
mysql -u root		// mysq monitor \q - quit; \? - help
composer -v		// display composer version

php artisan --version	// display Laravel framework version	



PROJECT STARTUP NOTES (required php ver 7.2)

git clone <project-name>
mysql -u <user-name> -p <pass>
create database <db-name>
use <db-name>
source <sql-dump-file-in-same-dir>.sql
quit
copy .env file details for local environment
npm install
composer update
php artisan migrate:status
php artisan migrate (if required)
npm run production
php artisan tinker
User::find(2)
$u = App\Admin\User::find(2);
$u->password = bcrypt('secret');
$u->save();
php artisan serve
http://127.0.0.1:8000/admin/login



composer create-project laravel/laravel <project-name> // Start Laravel project
laravel new <project-name>	// Start Laravel project if you can access laravel globally
cd <project-name> 
php artisan serve		// http://127.0.0.1:8000

rm -rf <project-name>		// delete project


----------

dd('$variable');		// die and dump
ddd('$variable');		// die dump and debug
abort(404);			// gives 404 error page

base_path() 			// path to your project
app_path() 			// app directory
resource_path() 		// resources directory

npm run watch

----------

to create a controller, in terminal 'php artisan make:controller PagesController'

Remember to restart with "php artisan serve" after changing your vendor/.env file

----------

Blade Templating Engine

https://laravel.com/docs/8.x/blade

<?php echo $post->title; ?> 
is same as this
{{ $post->title; }}


<?php foreach ($posts as $post) : ?>
is same as this
@foreach ($posts as $post)
@endforeach


Displaying Unescaped Data
Hello, {!! $name !!}. // ect. get rid of <p> tag at beginning and the end

@dd($loop)

<article class="{{ $loop->even ? 'mb-6' : '' }} ">

<?= $post->body; ?>

----------


php artisan tinker
$user = new User;
$user->name = 'Laurynas';
$user->email = 'laurynas@email.lt';
$user->password = bcrypt('secret');
$user->save();

User::find(1);
User::all();

$users = User::all();
$users->pluck('name');
$users->map(function($user) {return $user->name;});

$users->first();
$users[0];


php artisan tinker

App\Models\Post::count();
App\Models\Post::all();

$post = new App\Models\Post;
$post->title = 'My First Post';
$post->exerpt = 'First post Body exerpt';
$post->body = 'First post Body';
$post->save();

use App\Models\Post;
Post::count();
Post::all();
Post::first();
Post::find(1);

$post->title;
$post->body;
$post->author->name;

$post->fresh(); 	\\ gives fresh post instance; it is like undo; 

$post-> update(['exerpt' => 'Changed']);

$post = App\Models\Post::first();
$post->body;
$post->body = '<p>' . $post->body . '</p>';
$post->save();

php artisan tinker
use App\Models\Post;
Post::create(['title' => 'My Third Post', 'exerpt' => 'somethig about third post', 'body' => 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.']);

php artisan make:model Category -m
php artisan tinker
use App\Models\Category
$c = new Category;
$c->name = 'Personal';
$c->slug = 'personal';
$c->save();

php artisan tinker
$post = App\Models\Post::first();
$post->category(); 	//this returns instance
$post->category; 	// access as property
$post->category->name; 

php artisan tinker
App\Models\Category::first()



php artisan db:seed --class=PostsSeed
php artisan db:seed --class=CategoriesSeed

php artisan db:seed


php artisan tinker
App\Models\User::first()
App\Models\User::first()->posts

App\Models\Post::first()
App\Models\Post::first()->user
App\Models\Post::with('user')->first();


php artisan tinker
App\Models\User::factory()->create();
App\Models\Post::factory()->create();
App\Models\Post::first();
App\Models\Post::with('user')->first();
App\Models\Post::with('user', 'category')->first();
php artisan db:seed
php artisan migrate:fresh --seed


php artisan tinker
App\Models\Post::factory()->create();

Unfinished lesson 29



----------

CREATE MODEL WITH MIGRATION

php artisan make:model StickersClientDetailsCheck -m 

https://demonuts.com/insert-form-data-into-database-using-laravel/


CREATE MIGRATION IN EXISTING TABLE

php artisan help make:migration

php artisan make:migration add_retail_price_to_products_stores_table --table=products_stores

php artisan migrate:status

php artisan migrate

----------



php artisan make:seeder RetailSeeder

php artisan db:seed --class=RetailSeeder


----------

Laravel Clockwork

or native logging

    Illuminate\Support\Facades\DB::listen(function ($query){
        logger($query->sql, $query->bindings);
    });

sudo mysql -u <user-name> -p <password>


---CREATE NEW USER
mysql> CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password';
mysql> GRANT ALL PRIVILEGES ON * . * TO 'newuser'@'localhost';
mysql> FLUSH PRIVILEGES;



---IMPORT DB DUMP
CREATE DATABASE worhan;
USE worhan
source <file-name>.sql




---SHOW USERS
mysql> SELECT User, Host FROM mysql.user;



mysql> GRANT CREATE ON *.* TO 'username'@'localhost';
mysql> exit
sudo mysql
mysql> FLUSH PRIVILEGES;
mysql> exit
mysql -u username -p

sudo mysql
mysql> GRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost';
mysql> SHOW GRANTS FOR 'username'@'localhost';
mysql> FLUSH PRIVILEGES;
mysql> exit
mysql -u username -p



---ALTER AUTO INCREMENT
alter table posts AUTO_INCREMENT = 6



USE <db-name>;




SELECT <column-name> FROM <table-name>
or
SELECT * FROM <table-name>					//selects everything
FROM <table-name>
WHERE <column-name> = 1
ORDER BY <column-name>


SELECT <column-name>, <column-name> FROM <table-name>


SELECT first_name, last_name, points, points + 10
FROM <customers>


SELECT 
	first_name, 
	last_name, 
	points, 
	(points + 10)*100 AS discount_factor	// aliasing
FROM <customers>


SELECT 
	first_name, 
	last_name, 
	points, 
	(points + 10)*100 AS "discount factor"	// with whitespace in name
FROM <customers>


SELECT DISTINCT <column-name>
FROM <table-name>


SELECT * FROM <table-name> 
WHERE <column-name> > 3000


SELECT * FROM <table-name> 
WHERE <column-name> != 'LT'


SELECT * FROM <table-name> 
WHERE <column-name> > '1990-01-01'
AND <table-name> > 1000


SELECT * FROM <table-name> 
WHERE <column-name> > '1990-01-01'
OR <table-name> > 1000


SELECT * FROM <table-name> 
WHERE <column-name> > '1990-01-01'
OR <table-name> > 1000
AND <table-name> = "LT"  		// AND condition always evaluates first


SELECT * 
FROM <table-name> 
WHERE <column-name> > '1990-01-01' OR 
(<table-name> > 1000 AND <table-name> = "LT")  	


SELECT * 
FROM <table-name> 
WHERE NOT (<column-name> > '1990-01-01' OR <table-name> > 1000)

cleaner approach

SELECT * 
FROM <table-name> 
WHERE <column-name> <= '1990-01-01' AND <table-name> <= 1000 


SELECT *
FROM <table-name>
WHERE column-name> = 6 AND <column-name> * <column-name> > 30


SELECT *
FROM <table-name>
WHERE <column-name> = 'LT' OR <column-name> = 'LV' OR <column-name> = 'EE'

shorter way

SELECT *
FROM <table-name>
WHERE <column-name> IN ('LT', 'FL', 'GA')


SELECT *
FROM <table-name>
WHERE <column-name> NOT IN ('LT', 'FL', 'GA')


SELECT *
FROM <table-name>
WHERE <column-name> >= 1000 AND <= 3000

shorter way

SELECT *
FROM <table-name>
WHERE <column-name> BETWEEN 1000 AND 3000


SELECT *
FROM <table-name>
WHERE <column-name> LIKE 'b%' 	// this gives where first character starts with 'b' and any other character after that, does not matter is it upper case or lower


SELECT *
FROM <table-name>
WHERE <column-name> LIKE '%b%'	// any number of characters before or after 'b'


SELECT *
FROM <table-name>
WHERE <column-name> LIKE '_y'	// where is axactly two characters long and last one is 'b'


SELECT *
FROM <table-name>
WHERE <column-name> LIKE 'b____y'	// where is axactly first char is  'b' four any chars and last one is 'y'
-- % any number of characters
-- _ single character


SELECT
FROM customers
WHERE address LIKE '%trail%' OR
	  address LIKE '%avenue%'


SELECT
FROM customers
WHERE phone LIKE '%9'


SELECT
FROM customers
WHERE phone NOT LIKE '%9'


SELECT *
FROM <table-name>
WHERE <column-name> REGEXP '^something' 	// ^ sign to present a beggining of a string


SELECT *
FROM <table-name>
WHERE <column-name> REGEXP 'something$' 	// $ sign to present a end of a string


SELECT *
FROM <table-name>
WHERE <column-name> REGEXP 'string1|str2' 	// | (pipe) sign to show one or other string in search fields

















------- PRESTA

<?php


--// CHECK COLUMN NAME EXISTS
$query = "
    SELECT 
        COUNT(*) 
    FROM 
        information_schema.COLUMNS 
    WHERE 
        TABLE_SCHEMA = 'prestashop'
        AND TABLE_NAME = 'ps_shop' 
        AND COLUMN_NAME = 'id_shop'
    ;";
$result = Db::getInstance()->getValue($query);


--// CREATE TABLE 
return Db::getInstance()->execute('
            CREATE TABLE IF NOT EXISTS `'. _DB_PREFIX_ .'client_manager` (
            `client_manager_id` int(11) NOT NULL AUTO_INCREMENT,
            `customer_id` int(10) unsigned NOT NULL,
            `employee_id` int(10) unsigned NOT NULL,
            PRIMARY KEY  (`client_manager_id`)
            ) ENGINE='. _MYSQL_ENGINE_ .' DEFAULT CHARSET=utf8;');


CREATE TABLE IF NOT EXISTS `ss_pp_product_delivery_carrier` (
            `id_pp_product_delivery_carrier` int(11) NOT NULL AUTO_INCREMENT,
            PRIMARY KEY  (`id_pp_product_delivery_carrier`)
            ) DEFAULT CHARSET=utf8;

CREATE TABLE IF NOT EXISTS `ss_pp_product_delivery_carrier_shop` (
            `id_pp_product_delivery_carrier` int(11) NOT NULL AUTO_INCREMENT,
            `id_shop` INT(11) NOT NULL,
            PRIMARY KEY  (`id_pp_product_delivery_carrier`, `id_shop`)
            ) DEFAULT CHARSET=utf8;

CREATE TABLE IF NOT EXISTS `ss_pp_product_delivery_carrier_lang` (
            `id_pp_product_delivery_carrier` int(11) NOT NULL AUTO_INCREMENT,
            `id_lang` INT(11) NOT NULL,
            PRIMARY KEY  (`id_pp_product_delivery_carrier`, `id_lang`)
            ) DEFAULT CHARSET=utf8;


--// DB WITH FOREIGN KEY
$sql[] = '
    CREATE TABLE IF NOT EXISTS `'._DB_PREFIX_.'pp_empty_stock_deleter` (
        `id_pp_empty_stock_deleter` INT(11) NOT NULL AUTO_INCREMENT,
        `id_product` int(10) unsigned NOT NULL,
        `date_add` DATETIME NOT NULL,
    PRIMARY KEY (`id_pp_empty_stock_deleter`),
    FOREIGN KEY (`id_product`) REFERENCES  `' . _DB_PREFIX_ . 'product`(`id_product`) 
    ON DELETE CASCADE ON UPDATE NO ACTION
    ) ENGINE='._MYSQL_ENGINE_.' DEFAULT CHARSET=utf8;';



--//UPDATE All column values
UPDATE table SET column = NULL;


--// GET single value
return (int)Db::getInstance()->getValue('SELECT `employee_id` FROM `'. _DB_PREFIX_ .'client_manager` WHERE `customer_id` = '.(int) $customerId);


--// GET single value WITH PSQL
$customerId = Db::getInstance()->getValue('
    SELECT `id_customer`
    FROM `'. _DB_PREFIX_ .'address`
    WHERE `phone_mobile` = "'.pSQL($phone).'"
    ;');


--// GET ARRAY VALUES  
public function getOrderList($dateFrom, $dateTo){
    
    return Db::getInstance()->executeS('
    SELECT `id_order`
    FROM `'. _DB_PREFIX_ .'orders`
    WHERE `date_add` BETWEEN "'. $dateFrom .'" AND "'. $dateTo .'"
    ;');
}


$orderDetails = Db::getInstance()->getRow('
    SELECT `id_order`, `id_cart`, `secure_key`, `current_state`, `total_paid`, `payment`
    FROM `'. _DB_PREFIX_ .'orders`
    WHERE `id_order` = "'.(int) $orderId .'"
    ;');



--// GET WITH IN (SELECTED VALUES IN COLUMN)
$positive = Db::getInstance()->getValue('
    SELECT COUNT(`id_service_feedback_shop`)
    FROM `' . _DB_PREFIX_ . 'service_feedback_shop`
    WHERE `id_shop` = ' . (int) $shopId .'
    AND `rating` IN (5, 4)
    ;');



--// INSERT
Db::getInstance()->insert('configuration', [
    'id_shop_group' => NULL,
    'id_shop' => NULL,
    'name' => "PPFREEDELIVERYPRODUCT_CART_RULE",
    'value' => $cartRule->id,
    'date_add' => $timeNow,
    'date_upd' => $timeNow,
]);


Db::getInstance()->execute('
			INSERT INTO `'. _DB_PREFIX_ .'client_manager` (`id`, `customer_id`, `employee_id`) 
            VALUES (NULL, '.(int) $idCustomer .', ' .(int) $idEmployee . ')
            ;');

Db::getInstance()->execute('
    INSERT INTO '. _DB_PREFIX_ .'product_deposit_product (`id_product_deposit_deposit`, `id_product`)
    VALUES ('.(int) $idDeposit .', '.(int) $idProduct .')'
);

Db::getInstance()->execute('
                    INSERT INTO `'._DB_PREFIX_.'store_carrier_store` (`id_store_carrier_store`, `id_store`, `active`, `date_add`, `date_upd`) 
                    VALUES ('.$key.', '.(int) $store['id_store'].', 1, "'.date("Y-m-d H:i:s").'", "'.date("Y-m-d H:i:s").'");');

Db::getInstance()->execute('
                    INSERT INTO `'._DB_PREFIX_.'store_carrier_store_lang` (`id_store_carrier_store`, `id_lang`, `pickup_time`) 
                    VALUES ('.$key.', 1, "");');
                    
Db::getInstance()->execute('
                    INSERT INTO `'._DB_PREFIX_.'ppproductvideo` (`id_ppproductvideo`, `id_product`, `video_link`) 
                    VALUES (0, '.(int) $productId .', "'. $videoLink .'");');



--// UPDATE
Db::getInstance()->update('client_manager', array('employee_id' => (int) $idEmployee), 'customer_id = '.(int) $idCustomer);


--// UPDATE WITH WHERE AND
Db::getInstance()->update(
    'product_shop',
    array('active' => (int) $state),
    '`id_product` = ' . (int) $idProduct . ' AND `id_shop` = ' . (int) $shopId
);


--//DELETE
Db::getInstance()->delete('pp_product_delivery_product', 'id_product = ' .(int) $productId);

--// DELETE WITH AND
Db::getInstance()->delete('pp_product_delivery_product', '`id_product` = ' .(int) $productId .' AND `id_pp_product_delivery` = '.(int) $result, 1);



--//WITH TERNARY #1
public static function getIdByProduct($productId, $combinationId = 0){

    $context = Context::getContext();
    $shopId = $context->shop->id;
    $langId = $context->language->id;

    $combinationId = ($combinationId) ? "AND fdp.`id_combination` = " . (int) $combinationId : "";

    return Db::getInstance()->getValue('
        SELECT fdp.`id_pp_free_delivery_product`
        FROM `' . _DB_PREFIX_ . 'pp_free_delivery_product` AS fdp
        LEFT JOIN `' . _DB_PREFIX_ . 'pp_free_delivery_product_lang` AS fdpl 
            ON (fdp.`id_pp_free_delivery_product` = fdpl.`id_pp_free_delivery_product` 
                AND fdpl.`id_lang` = ' . (int) $langId . ' 
                AND fdpl.`id_shop` = ' . (int) $shopId . ')
        LEFT JOIN `'._DB_PREFIX_.'pp_free_delivery_product_shop` AS fdps 
            ON (fdp.`id_pp_free_delivery_product` = fdps.`id_pp_free_delivery_product`)
        WHERE fdp.`id_product` = ' . (int) $productId . '
        ' . $combinationId . '
        ;');
}

--//WITH TERNARY #2
public static function getManufacturers($active = true, $idShop = 0)
{
    $context = Context::getContext();

    if (!$idShop) {
        $idShop = (int) $context->shop->id;
    }

    $langId = $context->language->id;
    $where = $active ? ' WHERE m.`active` = "1" ' : '';

    return Db::getInstance()->executeS('
        SELECT  m.`id_manufacturer`, m.`name`
        FROM `'._DB_PREFIX_.'manufacturer` AS m
        LEFT JOIN `'._DB_PREFIX_.'manufacturer_lang` AS ml ON (m.`id_manufacturer` = ml.`id_manufacturer`
            AND ml.`id_lang` = '.(int) $langId .')
        LEFT JOIN `'._DB_PREFIX_.'manufacturer_shop` AS ms ON (m.`id_manufacturer` = ms.`id_manufacturer`
            AND ms.`id_shop` = '.(int) $idShop .')
        '.$where.'
        ORDER BY m.`id_manufacturer` ASC
    ');
}




--//WITH DELETE INSERT OR UPDATE LOGIC

public function hookActionProductUpdate($params) {

    if (Tools::isSubmit('ppproductdelivery_select')){

        $ppproductdeliveryId = Tools::getValue('ppproductdelivery_select');
        
        $productId = $params['id_product'];

        if (!$productId){
            return;
        }

        $defaultId = PpProductDeliveryDelivery::getDefaultDeliveryId();

        if ($defaultId == $ppproductdeliveryId){
            return;
        }

        $result = Db::getInstance()->getValue('
            SELECT `id_pp_product_delivery` 
            FROM `'. _DB_PREFIX_ .'pp_product_delivery_product` 
            WHERE `id_product` = '.(int) $productId .'
            ');
        

        if (!empty($result) && $ppproductdeliveryId == "0"){
            return Db::getInstance()->delete('pp_product_delivery_product',
                '`id_product` = ' .(int) $productId .' AND `id_pp_product_delivery` = '.(int) $result, 1);
        }

        if (empty($result) && $ppproductdeliveryId != "0"){

            return Db::getInstance()->insert('pp_product_delivery_product', [
                'id_pp_product_delivery' => (int) $ppproductdeliveryId,
                'id_product' => (int) $productId,
            ]);

        } else if (!empty($result) && $ppproductdeliveryId != "0"){

            return Db::getInstance()->update('pp_product_delivery_product',
                array('id_pp_product_delivery' => (int) $ppproductdeliveryId), 'id_product = '.(int) $productId);

        }
    }
}



--//SEARCH WITH SUBSELECT IN WHERE
$this->_where = 'AND (SELECT GROUP_CONCAT(ad.company SEPARATOR ", ") FROM ps_address ad WHERE ad.id_customer = a.id_customer ) LIKE "%' . pSQL($companyName) . '%"';



--//SUBSELECT WITH CASE AND OTHER SUB SELECT INSIDE
(
    SELECT 
        CASE
            WHEN EXISTS (
                SELECT reference
                FROM ps_product
                WHERE reference = a.reference 
                AND a.id_product = 0
                GROUP BY reference
                HAVING MAX(id_product) = 0
            ) THEN 1
            ELSE 0
        END
) AS native_products




-----------

ALTER TABLE `gg_pp_productvideo_description_product` ADD UNIQUE(`id_product`);




SELECT id_order, count(id_order) 
FROM `ps_order_invoice` 
GROUP BY id_order 
ORDER BY `count(id_order)` DESC

SELECT id_product, count(id_product) 
FROM `ps_product_supplier`  
GROUP by id_product  
ORDER BY `count(id_product)`  DESC


--DATA SYNC 
--TABLE `ps_stock_available` values in column `ps_stock_available` where id_shop = 1 copy to id_shop = 4
UPDATE ps_stock_available sa1
INNER JOIN ps_stock_available sa2 ON sa1.id_product = sa2.id_product
SET sa1.out_of_stock = sa2.out_of_stock
WHERE sa1.id_shop = 4 AND sa2.id_shop = 1;



SELECT `id_object`, `id_provider`
FROM `ps_prsync_entity` 
WHERE `id_object` IN (
  SELECT `id_object` 
  FROM `ps_prsync_entity` 
  GROUP BY `id_object` 
  HAVING COUNT(DISTINCT `id_provider`) > 1
);



SELECT * FROM `ps_product` WHERE id_product = 856 OR id_product = 2503 OR id_product = 2504;

-- VISIBILITY
UPDATE `ps_pp_empty_stock_deleter` SET date_add = '2023-03-11 09:00:00' LIMIT 8;

-- DELETE
UPDATE `ps_pp_empty_stock_deleter` SET date_add = '2022-02-22 22:22:22' LIMIT 3;








--  ANON DB

-- "DOCKER settings"

update cr_configuration set value = 2 where name ='PS_SMARTY_FORCE_COMPILE';
update cr_configuration set value = 0 where name ='PS_CIPHER_ALGORITHM';
update cr_configuration set value = 0 where name ='PS_SSL_ENABLED';
update cr_configuration set value = 0 where name ='PS_SSL_ENABLED_EVERYWHERE';
update cr_configuration set value = 0 where name ='PS_SMARTY_CACHE';
update cr_configuration set value = 0 where name ='PS_JS_THEME_CACHE';
update cr_configuration set value = 0 where name ='PS_CSS_THEME_CACHE';
update cr_configuration set value = 0 where name ='PS_HTACCESS_CACHE_CONTROL';
update cr_configuration set value = 3 where name ='PS_MAIL_METHOD';
update cr_configuration set value = 'http://localhost:5550/' where name ='PS_SHOP_DOMAIN';
update cr_configuration set value = 'http://localhost:5550/' where name ='PS_SHOP_DOMAIN_SSL';
update cr_shop_url set domain = 'localhost:5550', domain_ssl = 'localhost:5550', physical_uri = '/' where id_shop_url = 1 and id_shop = 1;

-- "Database anonymization"

TRUNCATE TABLE cr_connections;
TRUNCATE TABLE cr_connections_source;
TRUNCATE TABLE cr_connections_page;
TRUNCATE TABLE cr_guest;
TRUNCATE TABLE cr_log;
-- TRUNCATE TABLE cr_referrer;
-- TRUNCATE TABLE cr_referrer_shop;
-- TRUNCATE TABLE cr_referrer_cache;
TRUNCATE TABLE cr_pagenotfound;
TRUNCATE TABLE cr_mail;
DELETE FROM cr_specific_price WHERE `to` != '0000-00-00 00:00:00' AND `to` < NOW();
DELETE FROM cr_specific_price_rule WHERE `to` != '0000-00-00 00:00:00' AND `to` < NOW();
TRUNCATE TABLE cr_statssearch;
TRUNCATE TABLE cr_smarty_cache;
TRUNCATE TABLE cr_smarty_last_flush;
TRUNCATE TABLE cr_smarty_lazy_cache;
TRUNCATE TABLE cr_search_index;
TRUNCATE TABLE cr_search_word;

-- "Data is Truncated! "

SET
    lastname = CONCAT('lastname', '_', id_customer),
    firstname = CONCAT('firstname', '_', id_customer),
    address1 = CONCAT('address1', '_', id_customer),
    address2 = CONCAT('address2', '_', id_customer),
    postcode = 'LT-00000',
    city = CONCAT('city', '_', id_customer),
    other = CONCAT('other', '_', id_customer),
    phone = CONCAT('phone', '_', id_customer),
    phone_mobile = CONCAT('phone_mobile', '_', id_customer),
    vat_number = CONCAT('vat_number', '_', id_customer),
    dni = CONCAT('dni', '_', id_customer),
    company = CONCAT('company', '_', id_customer),
    id_country = 131;
UPDATE
    cr_connections
    
SET
    ip_address = NULL;
UPDATE
    cr_customer
    
SET
    lastname = CONCAT('lastname', '_', id_customer),
    firstname = CONCAT('firstname', '_', id_customer),
    siret = NULL,
    ape = NULL,
    company = NULL,
    email = CONCAT('email', '_', id_customer,'@','email.com'),
    passwd = MD5(CONCAT(RAND(), passwd)),
    birthday = NULL,
    newsletter = 0,
    optin = 0,
    website = NULL,
    ip_registration_newsletter = NULL,
    secure_key = MD5(CONCAT(RAND(), secure_key)),
    active = 0,
    newsletter_date_add = NULL;
UPDATE
    cr_customer_message
    
SET
    message = MD5(CONCAT(RAND(), message)),
    ip_address = '',
    user_agent = '';
UPDATE
    cr_customer_thread
SET
    email = MD5(CONCAT(RAND(), email));
UPDATE
    cr_message
SET
    message = MD5(CONCAT(RAND(), message));
UPDATE
    cr_mail
SET
    recipient = MD5(CONCAT(RAND(), recipient));


UPDATE
    cr_product_comment
SET
    title = NULL,
    content = MD5(CONCAT(RAND(), content)),
    customer_name = NULL;
     

-- "Data is anonymous!"

DELETE FROM cr_employee
  WHERE cr_employee.id_employee IN (
      SELECT ppp.id_employee
      FROM (
          SELECT pp.id_employee
          FROM cr_employee pp
          WHERE pp.email not
          LIKE '%prestapro.lt'
      )
      AS ppp);
      

DELETE FROM cr_employee_shop
  WHERE cr_employee_shop.id_employee IN (
      SELECT ppp.id_employee
      FROM (
          SELECT pp.id_employee
          FROM cr_employee pp
          WHERE pp.email not
          LIKE '%prestapro.lt'
      )
      AS ppp);

-- "Employees removed!"

UPDATE cr_configuration p1
SET
    p1.value = NULL WHERE p1.id_configuration
IN
    (SELECT p2.id_configuration
    from (SELECT * FROM cr_configuration) p2
    WHERE p2.name LIKE '%api%');
UPDATE cr_configuration p1
SET p1.value = NULL WHERE p1.id_configuration
IN
    (SELECT p2.id_configuration
    from (SELECT * FROM cr_configuration) p2
    WHERE p2.name REGEXP '^._KEY.$');
UPDATE cr_configuration p1
SET
    p1.value = NULL WHERE p1.id_configuration
IN
    (SELECT p2.id_configuration
    from (SELECT * FROM cr_configuration) p2
    WHERE p2.name REGEXP '^._PASSW.$');
      
-- "Sensitive data is removed!"



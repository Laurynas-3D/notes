
mysql -u debian-sys-maint -p


CREATE DATABASE worhan;
USE worhan
source <file-name>.sql

-------

alter table posts AUTO_INCREMENT = 6

-------

USE <db-name>;

SELECT <column-name> FROM <table-name>
or
SELECT * FROM <table-name>					//selects everything
FROM <table-name>
WHERE <column-name> = 1
ORDER BY <column-name>

SELECT <column-name>, <column-name> FROM <table-name>

SELECT first_name, last_name, points, points + 10
FROM <customers>

SELECT 
	first_name, 
	last_name, 
	points, 
	(points + 10)*100 AS discount_factor	// aliasing
FROM <customers>

SELECT 
	first_name, 
	last_name, 
	points, 
	(points + 10)*100 AS "discount factor"	// with whitespace in name
FROM <customers>

SELECT DISTINCT <column-name>
FROM <table-name>

SELECT * FROM <table-name> 
WHERE <column-name> > 3000

SELECT * FROM <table-name> 
WHERE <column-name> != 'LT'

SELECT * FROM <table-name> 
WHERE <column-name> > '1990-01-01'
AND <table-name> > 1000

SELECT * FROM <table-name> 
WHERE <column-name> > '1990-01-01'
OR <table-name> > 1000

SELECT * FROM <table-name> 
WHERE <column-name> > '1990-01-01'
OR <table-name> > 1000
AND <table-name> = "LT"  		// AND condition always evaluates first

SELECT * 
FROM <table-name> 
WHERE <column-name> > '1990-01-01' OR 
(<table-name> > 1000 AND <table-name> = "LT")  	


SELECT * 
FROM <table-name> 
WHERE NOT (<column-name> > '1990-01-01' OR <table-name> > 1000)

cleaner approach

SELECT * 
FROM <table-name> 
WHERE <column-name> <= '1990-01-01' AND <table-name> <= 1000 


SELECT *
FROM <table-name>
WHERE column-name> = 6 AND <column-name> * <column-name> > 30


SELECT *
FROM <table-name>
WHERE <column-name> = 'LT' OR <column-name> = 'LV' OR <column-name> = 'EE'

shorter way

SELECT *
FROM <table-name>
WHERE <column-name> IN ('LT', 'FL', 'GA')


SELECT *
FROM <table-name>
WHERE <column-name> NOT IN ('LT', 'FL', 'GA')


SELECT *
FROM <table-name>
WHERE <column-name> >= 1000 AND <= 3000

shorter way

SELECT *
FROM <table-name>
WHERE <column-name> BETWEEN 1000 AND 3000


SELECT *
FROM <table-name>
WHERE <column-name> LIKE 'b%' 	// this gives where first character starts with 'b' and any other character after that, does not matter is it upper case or lower


SELECT *
FROM <table-name>
WHERE <column-name> LIKE '%b%'	// any number of characters before or after 'b'


SELECT *
FROM <table-name>
WHERE <column-name> LIKE '_y'	// where is axactly two characters long and last one is 'b'


SELECT *
FROM <table-name>
WHERE <column-name> LIKE 'b____y'	// where is axactly first char is  'b' four any chars and last one is 'y'
-- % any number of characters
-- _ single character


SELECT
FROM customers
WHERE address LIKE '%trail%' OR
	  address LIKE '%avenue%'


SELECT
FROM customers
WHERE phone LIKE '%9'


SELECT
FROM customers
WHERE phone NOT LIKE '%9'


SELECT *
FROM <table-name>
WHERE <column-name> REGEXP '^something' 	// ^ sign to present a beggining of a string


SELECT *
FROM <table-name>
WHERE <column-name> REGEXP 'something$' 	// $ sign to present a end of a string


SELECT *
FROM <table-name>
WHERE <column-name> REGEXP 'string1|str2' 	// | (pipe) sign to show one or other string in search fields
























------- PRESTA

<?php

// CREATE TABLE 
return Db::getInstance()->execute('
            CREATE TABLE IF NOT EXISTS `'._DB_PREFIX_.'client_manager` (
            `client_manager_id` int(11) NOT NULL AUTO_INCREMENT,
            `customer_id` int(10) unsigned NOT NULL,
            `employee_id` int(10) unsigned NOT NULL,
            PRIMARY KEY  (`client_manager_id`)
            ) ENGINE='._MYSQL_ENGINE_.' DEFAULT CHARSET=utf8;');



//  GET single value
return (int)Db::getInstance()->getValue('SELECT `employee_id` FROM `'._DB_PREFIX_.'client_manager` WHERE `customer_id` = '.$customerId);



// INSERT
Db::getInstance()->execute('
			INSERT INTO `' . _DB_PREFIX_ . 'client_manager` (`id`, `customer_id`, `employee_id`) 
            VALUES (NULL, '. $idCustomer.', ' . $idEmployee . ');');

Db::getInstance()->execute('
    INSERT INTO ' . _DB_PREFIX_ . 'product_deposit_product (`id_product_deposit_deposit`, `id_product`)
    VALUES (' . $idDeposit. ', ' . $idProduct . ')'
);



// UPDATE
db::getInstance()->update('client_manager', array('employee_id' => $idEmployee), 'customer_id = '.$idCustomer);


// GET ARRAY VALUES with executeS string 
public function getOrderList($dateFrom, $dateTo){
    
    return Db::getInstance()->executeS('
    SELECT `id_order`
    FROM `'._DB_PREFIX_.'orders`
    WHERE `date_add` BETWEEN "'. $dateFrom.'" AND "'.$dateTo .'";');
}




-----------



INSERT INTO `ps_product_deposit_product` (`id_product_deposit_deposit`, `id_product`) VALUES ('2', '555');

DELETE FROM `ps_product_deposit_product` WHERE `ps_product_deposit_product`.`id_product_deposit_deposit` = 2 AND `ps_product_deposit_product`.`id_product` = 555

DELETE FROM `ps_product_deposit_product` WHERE `ps_product_deposit_product`.`id_product` = 555

return  Db::getInstance()->execute('
DELETE FROM `' . _DB_PREFIX_ . 'product_deposit_product` 
WHERE `id_product` = ' . (int) $idProduct);


GET PRICE

SELECT `id_product` , `price`
FROM `ps_product_deposit_product` pdp
LEFT JOIN `ps_product_deposit_deposit` pdd ON (pdd.id_product_deposit_deposit = pdp.id_product_deposit_deposit)
LEFT JOIN `ps_product_deposit_deposit_lang` pddl ON (pdd.id_product_deposit_deposit = pddl.id_product_deposit_deposit)
WHERE id_lang = 1;

SELECT `price`
FROM `ps_product_deposit_product` pdp
LEFT JOIN `ps_product_deposit_deposit` pdd ON (pdd.id_product_deposit_deposit = pdp.id_product_deposit_deposit)
LEFT JOIN `ps_product_deposit_deposit_lang` pddl ON (pdd.id_product_deposit_deposit = pddl.id_product_deposit_deposit)
WHERE id_lang = 1
AND `id_product` = 555;




GET TERMINAL NAME
SELECT CONCAT (pl.`name`, " / ", pl.`street`, " / ", pl.`city`) AS "result"
FROM `ps_orders` AS o
LEFT JOIN `ps_kg_dpd_parcels_cart` AS pc ON ( o.id_cart = pc.id_cart)
LEFT JOIN `ps_kg_dpd_parcels_list` AS pl ON ( pc.dpd_parcel_id = pl.id_paketshop)
WHERE `id_order` = 2033;


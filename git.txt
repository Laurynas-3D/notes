Git Update Over CLI

$ git --version

Since Git 2.16.1 you can use
$ git update-git-for-windows

In versions between 2.14.2 and 2.16.1, the command was
$ git update

Git Aliases

	git config --global alias.co checkout
	git config --global alias.br branch
	git config --global alias.cm commit
	git config --global alias.st status

STORE USER NAME AND PSW / REMEMBER PASSWORD or TOKEN

	// Make Git store the username and password and it will never ask for them. After push and entering credentials
	git config --global credential.helper store
	git push http://example.com/repo.git
	Username: <type-your-username>
	Password: <type-your-password>

	// remember in specific repository
	$ git config credential.helper store
	$ git push http://example.com/repo.git
	Username: <type-your-username>
	Password: <type-your-password>

CREATE REPOSITORY

Create a new repository on the command line (works best without creating README.md)
	touch README.md
	git init
	git add .
	git commit -m "first commit"
	git remote add origin https://github.com/Laurynas-3D/<repository-name>.git
	git push -u origin master

	Push an existing repository from the command line

	git remote add origin https://github.com/Laurynas-3D/<repository-name>.git
	git push -u origin master

REMOVE all of the repository (.git), leaving only the working directory
	
	rm -rf .git

UNDO git rm

	git reset HEAD
	git checkout .

REPOSITORY UPDATE
	git status
	git add .
	git commit -m 20190325
	git push

REPOSITORY DOWNLOAD/CLONE
	git clone https://github.com/Laurynas-3D/git-homework.git

	// git clone command creates a folder, names it after repository name
	// then downloads inside that folder everything

Remove directory from git but NOT local
	git status
	git rm -r --cached FolderNameToRemove
	git status
	git commit -m 20200123:2134
	git push
	git status

Remove directory from git and local
	git rm -r one-of-the-directories
	git commit . -m "Remove duplicated directory"
	git push origin <your-git-branch> (typically 'master', but not always)




Other Useful Commands

	git pull origin master --allow-unrelated-histories
		(wim mode, press escape from insert mode to enter command mode, then :wq! + Enter)
	git status

	git push -u origin --all
	// if this does not work then "git reset HEAD ." after that
	// git reset HEAD . // remove or commit reset, sometimes helps to solve push errors
	git status
	git add .
	git commit -m 20190512:1101
	git push

Dealing with non-fast-forward errors

Sometimes, Git can't make your change to a remote repository without losing commits. When this happens, your push is refused.
	$ git fetch origin
	# Fetches updates made to an online repository
	$ git merge origin YOUR_BRANCH_NAME
	# Merges updates made online with your local work

Clear Entire Git Cache

	In some cases, you may want to clear the cache of your entire Git staging area.
	This is particularly useful when you added multiple files that you want now to be ignored via your .gitignore file.
	To clear your entire Git cache, use the “git rm” command with the “-r” option for recursive.

	$ git rm -r --cached .


	Git please tell me who you are?
		git config --global user.email "email_here"
		or
		git config --global user.name "name_here"



git checkout // for reverting previous versions of the file

git diff // ???
git blame // ???
git show // ???
git revert // ???
git clean // ???
git remote // ???

Git branches

git branch testing
git status
git checkout testing
	or
git checkout -b testing
git checkout master
git merge another
git branch -d another // deleting branch


Please commit your changes or stash them before you merge.
// this message is because local changes are made and git is preventing to loose them,

choices are using git reset --hard

or git checkout -t -f remote/branch or with git stash, 1st git commit -m "my message" 2nd git stash pop,
or discard local changes for a specific file, git checkout filename



	----- Some Git Notes -----

	Github desktop, Gitkraken, Sourcetree - all these are GUI tools for git
	Github, Bitsource - Services for hosting project

	Authentication

	github accounts - pass & username
	2FA - two factor authentication

	Important note!!! - you never ever want to commit password files to github

	DCVS - Distributed Version
	SPOF - Single Point Of Failure

	.tar files -> Bitkeeper -> Git archives

	touch - command creates a file
	touch .ignore //create git ignore file; edit with notepad++
		
			.idea //folder
			.file //some excluded file

	touch .gitkeep // create empty file in empty directory to sync empty directories


------------------------------
